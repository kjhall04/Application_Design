8/19
Application Design

Key elements - flows good, clear design, efficiency, performance

resource management, 

modularity

Application Design - 2 core features
functional and aesthetics


8/21
need to keep a uniform structure
naming files similarly 

Design patterns - reusable solutuions for designs
singleton - makes sure classes have 1 instance and global ways to access instance
factory - 
observer -

flask - lightwight framework for small to medium applications
jango - high level framework for clean design

need to consider coplexity, performance needs, development time and team's knowledge of the programs

elements to think about
log in, messages, home page, 

librarys and framework help with reusability


8/23
MVP - minimum viable product

waterfall to agile
waterfall - all requirements

software development methodologies are frameworks

provide a structured apporaoch to building and maintainig
waterfall and agile

waterfall methodology - linear and sequential approach. very distinct phases, 
                        requirements gathering, system design, implementation, testing, development, maintainance
                        advantages - clarity, sequential, predictability, ease of management, flexible, 
                        disadvantages - late testing, lack of requirments towards the end, lack of customer involvment, rapid technology
                                        increase (waterfall couldnt keep up), increasing competition
                little flexibility, little customer involvement, more documentation, risks are costly and fixed late in the process
                delivers value at the end

agile methodology - emphazised indiviauals and communication over a fixed plan, is more flexible to change
                    iterative development, continuous feedback, cross-functional teams, emphasis on communication,
                    advantages - flexible,
                high flexibility, customer involvement, little documentation, risks are found early and fixed
                delivers value continuously

scrum - framework that uses sprints with specific roles
conbon - visual workflow 
extreme programming - technical excellence in short development cycles
lean development - maximizing value by eliminating waste and getting to the center of the matter

some hybrids (agile waterfall hybrid)
              begin like waterfall when gathering requirements and swtich to agile during development

future of Application Design - new methodologies will continue to be produced and implemented
                               further refinement of agile practices
                               ai and machine learning


8/26
implementation and testing python application
    top-down implemetation - starts with high level design and breaks it down into more detailed components
    bottom-up - starts with modules that are then implemented together later
    incremental - developing the application in small managable increments
    agile methodology - iterative development with flexibility to changes, small cycles with the end of goal of a shippable product

writing clean and maintainable consider
    makes it easier to update the code by yourself or have someone else do it
    use a type of style guide or code guide (PEP8)
    documentation - write comments - dot strings or hashtag
    refactoring - rewriting code later to make it more readable and efficient without chaning functionality

testing 
    making sure each stage works properly
    unit testing - testing individual components (or functions) in isolation
    integration testing - testing interactions with integrated components
    system testing - tests the complete system from top to bottom in an environment that imitates production

debugging
    varible inspection

Written, tested, debugged

deployment plan with steps for setting up the environment, deploying the application and doing the neccessary configurations
continuous integration and deployment

set up a process for setting up and monitoring the application
    regularly update the application to fix bugs, security features, and maintainance

continuous integration and continuous deployment        CICD


Object oriented programming
    organizes software around objects and functions rather than logic (one function to do them all)
object - self contained entity containing attributes and methodologies
         classes
make programs more modular and makes them easier to use and maintain and stay readable
benefits - encapsulation - keeping the data safe from external modification - isolation and bundling
           abstration - hiding the complexities and only showing neccessary bits to the outside world
                        like a black box or an API 
           inheritance - allows a new class (sub class) to inherit properties or methods from a base class

class - tmeplate for creating objects - defines attributes and methods for the object
        the object is an instance of that class
        attribute - a variable that belongs to all instances of the class - class and instance attributes
        method - functions within the class

simplified interactions - clear and simple interface


8/30
getters and setters
    getters - get data
    setters - set data
        manage how data is accesed and modified 

    implementation
    python uses a decorator used to enhance code
    decorator is recognized by the @ symbol
    getter is @property - turns a method into a getter
    setter is @property.setter - turns method into a setter 


9/4
excpetion handling
    meant to show the developer and user what the error is specifically
    python has a feature to handle errors and allow the program to resume gracfully or end without causing chaos

    example
        try:
            10 / 2
        excpet ZeroDivisionError:
            print('string')
        else:
            print('string')
        finally:
            print('string')

Best practices and advanced techniques
    only catch exceptions you know how to handle
    avoid using bare except clauses - using an empty except statement
    clean up resources in the finally block

9/6
modularity - chunks of code that can be programmed and maintained independently
scalability - the option to grow easier

import modules 
    ex.  import module_name

9/23
reporting